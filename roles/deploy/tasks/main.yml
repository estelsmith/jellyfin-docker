-
  name: "Create system group"
  group:
    name: "{{ app_system_user }}"
    gid: "{{ app_system_user_gid }}"
    state: "present"
    system: true

-
    name: "Create system user"
    user:
        create_home: false
        group: "{{ app_system_user_gid }}"
        home: "/"
        name: "{{ app_system_user }}"
        password: "!"
        shell: "/sbin/nologin"
        state: "present"
        system: true
        uid: "{{ app_system_user_uid }}"
    register: "app_user"

-
    name: Create app directory
    file:
        path: "{{ app_root_dir }}/{{ directory.path|default(directory) }}"
        state: directory
        owner: "{{ directory.owner|default('root') }}"
        group: "{{ directory.group|default('root') }}"
        mode: "{{ directory.mode|default('0755') }}"
    loop_control:
        loop_var: directory
    with_items:
        - ""
        -
            path: data
            owner: "{{ app_user.uid }}"
            group: "{{ app_user.group }}"
        -
            path: cache
            owner: "{{ app_user.uid }}"
            group: "{{ app_user.group }}"
    register: "app_dirs_modified"

-
    name: "Create library directories"
    file:
        path: "{{ app_library_path }}/{{ directory.path|default(directory) }}"
        state: directory
        owner: "{{ directory.owner|default(app_system_user) }}"
        group: "{{ directory.group|default(app_system_user) }}"
        mode: "{{ directory.mode|default('0755') }}"
    loop_control:
        loop_var: directory
    with_items:
        - ""
        - "movies"
        - "shows"
        - "transcode-scratch"

-
    name: Copy config
    template:
        src: "{{ file.path|default(file) }}"
        dest: "{{ app_root_dir }}/{{ file.path|default(file) }}"
        owner: "{{ file.owner|default('root') }}"
        group: "{{ file.group|default('root') }}"
        mode: "{{ file.mode|default('0644') }}"
    loop_control:
        loop_var: file
    with_items:
        - docker-compose.yml
    register: "app_files_modified"

-
    name: Update application
    docker_compose:
        project_name: "{{ app_compose_project_name }}"
        project_src: "{{ app_root_dir }}"
        pull: true
        remove_orphans: true
        restarted: true
        state: present
    when: "not app_skip_start and (app_dirs_modified.changed or app_files_modified.changed)"
